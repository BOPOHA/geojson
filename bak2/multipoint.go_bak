package geojson

import (
	"unsafe"
)

// MultiPoint GeoJSON Object
type MultiPoint struct {
	Coordinates []Position
	BBox        BBox
	extra       *extra
}

// Rect returns a rectangle that contains the entire object
func (g MultiPoint) Rect() Rect {
	if g.BBox != nil {
		return g.BBox.Rect()
	}
	return calculateRect2(g.Coordinates)
}

// Center is the center-most point of the object
func (g MultiPoint) Center() Position {
	return g.Rect().Center()
}

// AppendJSON appends a json representation to destination
func (g MultiPoint) AppendJSON(dst []byte) []byte {
	dst = append(dst, `{"type":"MultiPoint","coordinates":[`...)
	for i := 0; i < len(g.Coordinates); i++ {
		if i > 0 {
			dst = append(dst, ',')
		}
		dst = g.Coordinates[i].appendJSON(dst, g.extra, i)
	}
	dst = append(dst, ']')
	if g.BBox != nil && g.BBox.Defined() {
		dst = append(dst, `,"bbox":`...)
		dst = g.BBox.AppendJSON(dst)
	}
	dst = append(dst, '}')
	return dst
}

// JSON returns a json representation of the object
func (g MultiPoint) JSON() string {
	return string(g.AppendJSON(nil))
}

// String returns a string representation of the object
func (g MultiPoint) String() string {
	return g.JSON()
}

// Stats of the object
func (g MultiPoint) Stats() Stats {
	return Stats{
		Weight: int(unsafe.Sizeof(g)) + len(g.Coordinates)*16 +
			bboxWeight(g.BBox) + g.extra.weight(),
		PositionCount: len(g.Coordinates) + bboxPositionCount(g.BBox),
	}
}

// Contains another object
func (g MultiPoint) Contains(o Object) bool {
	if contains, certain := objectContainsRect(g.BBox, g, o); certain {
		return contains
	}
	// check for any points that contains the object.
	for _, p := range g.Coordinates {
		if (SimplePoint{Coordinates: p}).Contains(o) {
			return true
		}
	}
	return false
}

// Intersects another object
func (g MultiPoint) Intersects(o Object) bool {
	if intersects, certain := objectIntersectsRect(g.BBox, g, o); certain {
		return intersects
	}
	// check for any points that intersect the object.
	for _, p := range g.Coordinates {
		if (SimplePoint{Coordinates: p}).Intersects(o) {
			return true
		}
	}
	return false
}

// IntersectsPolyLine test if object intersect a polyline
func (g MultiPoint) IntersectsPolyLine(line []Position) bool {
	if g.BBox != nil && g.BBox.Defined() {
		return g.BBox.Rect().IntersectsPolyLine(line)
	}
	// check for any points that intersect the object.
	for _, p := range g.Coordinates {
		if p.IntersectsPolyLine(line) {
			return true
		}
	}
	return false
}

// parseGeoJSONMultiPoint will return a valid GeoJSON object.
func parseGeoJSONMultiPoint(data string) (Object, error) {
	var g MultiPoint
	var err error
	g.Coordinates, g.extra, err = parseCoords2(data)
	if err != nil {
		return nil, err
	}
	g.BBox, err = parseBBox(data)
	if err != nil {
		return nil, err
	}
	if g.BBox == nil {
		g.BBox = g.Rect().BBox()
	}
	return g, nil
}
