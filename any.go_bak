package geojson

import (
	"github.com/tidwall/geojson/geometry"
)

// Any is a not a geojson object, but rather a container for an interface{}
type Any struct{ Thing interface{} }

// forEach ...
func (g Any) forEach(iter func(geom Object) bool) bool {
	return iter(g)
}

// Empty ...
func (g Any) Empty() bool {
	return true
}

// Rect ...
func (g Any) Rect() geometry.Rect {
	return geometry.Rect{}
}

// Center ...
func (g Any) Center() geometry.Point {
	return geometry.Point{}
}

// AppendJSON ...
func (g Any) AppendJSON(dst []byte) []byte {
	return append(dst, "null"...)
}

// JSON ...
func (g Any) JSON() string {
	return string(g.AppendJSON(nil))
}

// String ...
func (g Any) String() string {
	return string(g.AppendJSON(nil))
}


// Within ...
func (g Any) Within(obj Object) bool {
	return false
}

// Contains ...
func (g Any) Contains(obj Object) bool {
	return false
}

// Intersects ...
func (g Any) Intersects(obj Object) bool {
	return false
}

func (g Any) WithinRect(rect geometry.Rect) bool {
	return false
}

func (g Any) WithinPoint(point geometry.Point) bool {
	return false
}

func (g Any) WithinLine(line *geometry.Line) bool {
	return false
}

func (g Any) WithinPoly(poly *geometry.Poly) bool {
	return false
}

func (g Any) IntersectsPoint(point geometry.Point) bool {
	return false
}

func (g Any) IntersectsRect(rect geometry.Rect) bool {
	return false
}

func (g Any) IntersectsLine(line *geometry.Line) bool {
	return false
}

func (g Any) IntersectsPoly(poly *geometry.Poly) bool {
	return false
}

// NumPoints ...
func (g Any) NumPoints() int {
	return 0
}

// Distance ...
func (g Any) Distance(obj Object) float64 {
	return 0
}
func (g Any) distancePoint(point geometry.Point) float64 {
	return 0
}
func (g Any) distanceRect(rect geometry.Rect) float64 {
	return 0
}
func (g Any) distanceLine(line *geometry.Line) float64 {
	return 0
}
func (g Any) distancePoly(poly *geometry.Poly) float64 {
	return 0
}
